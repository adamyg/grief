# -*- mode: mak; indent-tabs-mode: t; tab-width: 8 -*-
# $Id: Makefile.in,v 1.89 2024/04/16 11:37:13 cvsuser Exp $
# GRIEF editor makefile.
#
#
# Copyright (c) 1998 - 2024, Adam Young.
# All rights reserved.
#
# This file is part of the GRIEF Editor.
#
# The GRIEF Editor is free software: you can redistribute it
# and/or modify it under the terms of the GRIEF Editor License.
#
# Redistributions of source code must retain the above copyright
# notice, and must be distributed with the license document above.
#
# Redistributions in binary form must reproduce the above copyright
# notice, and must include the license document above in
# the documentation and/or other materials provided with the
# distribution.
#
# The GRIEF Editor is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# License for more details.
# ==end==
#

@SET_MAKE@
ROOT=		@abs_top_builddir@
top_builddir=	@top_builddir@

# File extensions

E=
O=		.o

CLEAN=		*.bak *~ *.BAK *.swp *.tmp core *.core a.out
XCLEAN=

# Compilers, programs

CC=		@CC@
CXX=		@CXX@
RM=		@RM@
RC=		@RC@
PERL=		@PERL@
LIBTOOL=	@LIBTOOL@

# Configuration

ifeq ("$(BUILD_TYPE)","")	#default
BUILD_TYPE=	debug
MAKEFLAGS+=	BUILD_TYPE=debug
endif
ifneq ("$(BUILD_TYPE)","release")
RTSUFFIX=d
endif

# Directories

D_INC=		$(ROOT)/include
D_BIN=		$(ROOT)/bin@TOOLCHAINEXT@/$(BUILD_TYPE)
D_OBJ=		$(ROOT)/obj@TOOLCHAINEXT@/$(BUILD_TYPE)/gr
D_LIB=		$(ROOT)/lib@TOOLCHAINEXT@/$(BUILD_TYPE)

D_DEP=		.deps
D_OBJDEP=	$(D_OBJ)/$(D_DEP)

# Dependencies

CCDEPEND=	@echo "\#no depend" > $(D_OBJDEP)/$<.Po

ifeq ("win32","@build_os@")

ifeq (vs,$(findstring vs,"@TOOLCHAIN@"))
CCPROFILE=msvc.profile
else ifeq ("@TOOLCHAIN@","owc20")
CCPROFILE=wc20.profile
else ifeq ("@TOOLCHAIN@","owc19")
CCPROFILE=wc.profile
#TODO
#else ifeq (mingw,$(findstring mingw,"@TOOLCHAIN@"))
#CCPROFILE=mingw.profile
endif

ifdef CCPROFILE
CCDEPEND=	@$(D_BIN)/makedepend \
			-MM -MC $(ROOT)/win32/$(CCPROFILE) -MG -MP -D__MAKEDEPEND__ \
				-f$(D_OBJDEP)/$(basename $(<F)).Po -MT$@ $(CDEPFLAGS) $<
CXXDEPEND=	@$(D_BIN)/makedepend \
			-MM -MC $(ROOT)/win32/$(CCPROFILE) -MG -MP -D__MAKEDEPEND__ -D__cplusplus \
				-f$(D_OBJDEP)/$(basename $(<F)).Po -MT$@ $(CDEPFLAGS) $<
endif
endif

ifneq ("win32","@build_os@")
ifndef CCDEPEND
ifeq (gcc,$(findstring gcc,$(CC)))
ifdef PURIFY
CC=		purify $(CC)
else
ifdef LANG
	LANG=C
	export LANG
endif
endif
depcomp=	$(SHELL) $(ROOT)/auto/depcomp
CCDEPEND=	@source='$<' object='$@' libtool=no \
			DEPDIR=$(D_DEP) depmode=gcc3 $(depcomp) $(CC) $(CDEPFLAGS) $(COPT) $(CINCLUDE) -o $@ -c $< 2>&1 >/dev/null
endif
endif	#CCDEPEND
endif	#!win32

CXXDEPEND?=	$(CCDEPEND)

# Common flags

CWALL=
ifeq (gcc,$(findstring gcc,$(CC)))
ifdef WALL2
WALL=1
endif
ifdef WALL
CWALL+=		-Wall \
		-Wextra \
		-Wformat \
		-Wuninitialized \
		-Wwrite-strings \
		-Wbad-function-cast \
		-Wpointer-arith \
		-Wstrict-prototypes \
		-Wmissing-prototypes \
		-Wmissing-declarations \
		-Wnested-externs \
		-Wcomment \
		-Wcast-align \
		-Winline \
		-Wshadow \
		-Wredundant-decls \
		-Wconversion
ifdef WALL2
CWALL+=		-Wstrict-overflow=5 \
		-Wcast-qual
else
CWALL+=		-Wno-sign-conversion \
		-Wno-missing-braces \
		-Wno-missing-field-initializers \
		-Wstrict-overflow=2
endif	#wall2
endif	#wall
endif	#gcc

XFLAGS=
CFLAGS=		@CFLAGS@
CWARN=		@CWARN@ $(CWALL)
CDEBUG=		@CDEBUG@
CRELEASE=	@CRELEASE@
CXXFLAGS=	@CXXFLAGS@
CXXDEBUG=	@CXXDEBUG@
ifeq ("$(CXXDEBUG)","")
CXXDEBUG=	$(CDEBUG)
endif
CXXRELEASE=	@CXXRELEASE@
ifeq ("$(CXXRELEASE)","")
CXXRELEASE=	$(CRELEASE)
endif
LDDEBUG=	@LDDEBUG@
LDRELEASE=	@LDRELEASE@

CINCLUDE=	-I$(D_INC) @CINCLUDE@

CEXTRA=		@DEFS@ @LIBCURL_CPPFLAGS@ -DLIBTRE_DLL
ifdef PURIFY
CEXTRA+=	-DUSING_PURIFY
endif
ifeq ("win32","@build_os@")
CEXTRA+=	-DWIN32
endif
CDEPFLAGS=	$(CEXTRA) $(CINCLUDE)

ifeq ("$(BUILD_TYPE)","release")
CFLAGS+=	$(CRELEASE) $(CWARN) $(CINCLUDE) $(CEXTRA) $(XFLAGS)
CXXFLAGS+=	$(CXXRELEASE) $(CXXWARN) $(CINCLUDE) @CXXINCLUDE@ $(CEXTRA) $(XFLAGS)
LDFLAGS=	$(LDRELEASE) @LDFLAGS@
else
CFLAGS+=	$(CDEBUG) $(CWARN) $(CINCLUDE) $(CEXTRA) $(XFLAGS)
CXXFLAGS+=	$(CXXDEBUG) $(CXXWARN) $(CINCLUDE) @CXXINCLUDE@ $(CEXTRA) $(XFLAGS)
LDFLAGS=	$(LDDEBUG) @LDFLAGS@
endif
ifeq (gcc,$(findstring gcc,$(CC)))
ifeq ("linux","@build_os@")
LDFLAGS+=	-rdynamic
endif
endif

LDLIBS=		-L$(D_LIB) -lbsddb -lbsdfetch -lbsdio -lwidechar -lchartable -lvfs -ltrie -lsplay -lllist -lmisc -lonigrx -ltre
LDLIBS+=	@LDLIBS@ @LIBS@
LDLIBS+=	@LIBENCA@ @LIBSPELL@ @LIBICU@ @LIBICONV@ @LIBCURL@ @LIBOPENSSL@ @LIBARCHIVE@ @LIBMAGIC@
LDLIBS+=	@LIBM@ @EXTRALIBS@
ifneq ("win32","@build_os@")
LDLIBS+=	@TERMLIB@ @LIBX11@
endif
LDLIBS+=	@LIBMALLOC@ @LIBTHREAD@

YFLAGS=		-d
ARFLAGS=	rcv
RMFLAGS=	-f
RMDFLAGS=	-rf


#########################################################################################
# Targets

TARGET=		gr$(E)
VPATH=		.

CPPSRC=\
	main.cpp

CSRC=\
	cmain.c			\
	accum.c			\
	anchor.c		\
	arg.c			\
	basic.c			\
	bookmark.c		\
	border.c		\
	buffer.c		\
	builtin.c		\
	chunk.c			\
	cmap.c			\
	config.c		\
	debug.c			\
	dict.c			\
	display.c		\
	echo.c			\
	eval.c			\
	file.c			\
	getkey.c		\
	getpwd.c		\
	hilite.c		\
	keyboard.c		\
	keywd.c			\
	kill.c			\
	language.c		\
	line.c			\
	lisp.c			\
	lock.c			\
	mac1.c			\
	macrolib.c		\
	macros.c		\
	map.c			\
	maths.c			\
	mouse.c			\
	object.c		\
	playback.c		\
	position.c		\
	prntf.c			\
	procspawn.c		\
	regdfa.c		\
	regexp.c		\
	regrpl.c		\
	region.c		\
	register.c		\
	ruler.c			\
	search.c		\
	sh_unix.c		\
	sh_win32.c		\
	signals.c		\
	symbol.c		\
	undo.c			\
	version.c		\
	wild.c			\
	window.c		\
	word.c			\
	\
	dialog.c		\
	dialog_tty.c		\
	widgets_tty.c		\
	\
	m_backup.c		\
	m_brief.c		\
	m_buf.c			\
	m_caller.c		\
	m_color.c		\
	m_debug.c		\
	m_display.c		\
	m_errno.c		\
	m_feature.c		\
	m_file.c		\
	m_fileio.c		\
	m_float.c		\
	m_ftp.c			\
	m_getopt.c		\
	m_hilite.c		\
	m_ini.c			\
	m_line.c		\
	m_macro.c		\
	m_main.c		\
	m_mchar.c		\
	m_msg.c			\
	m_random.c		\
	m_region.c		\
	m_regress.c		\
	m_ruler.c		\
	m_scan.c		\
	m_screen.c		\
	m_signal.c		\
	m_sort.c		\
	m_string.c		\
	m_symbol.c		\
	m_sysinfo.c		\
	m_system.c		\
	m_terminal.c		\
	m_time.c		\
	m_tokenize.c		\
	m_userprofile.c		\
	m_vfs.c			\
	m_window.c		\
	\
	m_pty.c			\
	pty_unix.c		\
	pty_win32.c		\
	\
	m_spell.c		\
	spell_enchant.c		\
	spell_hunspell.c	\
	spell_aspell.c		\
	\
	diff.c			\
	diff_hash.c		\
	\
	syntax.c		\
	syntaxhl.c		\
	syntaxdfa.c		\
	syntaxcol.c		\
	syntaxln.c		\
	\
	tags.c			\
	tagsex.c		\
	tagse.c			\
	\
	tty.c			\
	ttyrgb.c		\
	ttyterm.c		\
	ttyvio.c		\
	ttyncurses.c		\
	ttydos.c		\
	ttywin32.c		\
	ttyx11.c		\
	ttyx11if.c		\
	\
	mchar_guess.c		\
	mchar_util.c		\
	mchar_info.c		\
	mchar_iconv.c		\
	\
	sysinfo.c		\
	sysfile.c		\
	sys_dos.c		\
	sys_os2.c		\
	sys_unix.c		\
	sys_vms.c		\
	sys_win32.c

RESOURCES=\
	gr.rc

OBJS=		$(addprefix $(D_OBJ)/,$(patsubst %.c,%$(O),$(CSRC)))
OBJS+=		$(addprefix $(D_OBJ)/,$(patsubst %.cpp,%$(O),$(CPPSRC)))

ifeq ("win32","@build_os@")
ifeq (mingw,$(findstring mingw,"@TOOLCHAIN@"))
OBJS+=		$(addprefix $(D_OBJ)/,$(subst .rc,_res.o,$(RESOURCES)))
else
OBJS+=		$(addprefix $(D_OBJ)/,$(subst .rc,.res,$(RESOURCES)))
endif
endif #build_os


#########################################################################################
# Rules

.PHONY:			build release debug
build:		directories $(D_BIN)/$(TARGET)

release:
		$(MAKE) BUILD_TYPE=release $(filter-out release, $(MAKECMDGOALS))
debug:
		$(MAKE) BUILD_TYPE=debug $(filter-out debug, $(MAKECMDGOALS))

clean:
		@echo $(BUILD_TYPE) clean
		-@$(RM) $(RMFLAGS) $(BAK) $(D_BIN)/$(TARGET) $(TARGET) $(OBJS) $(CLEAN) $(XCLEAN) >/dev/null 2>&1
		-@$(RM) $(RMFLAGS) $(BAK) $(TARGET) $(D_OBJDEP)/*.Po >/dev/null 2>&1

.PHONY:		directories
directories:		$(D_OBJ)/.created $(D_OBJDEP)/.created $(OBJS)

$(D_BIN)/$(TARGET):	MAPFILE=$(basename $@).map
$(D_BIN)/$(TARGET):	$(OBJS)
		$(LIBTOOL) --mode=link $(CXX) $(LDFLAGS) -o $@ $(OBJS) $(LDLIBS) @LDMAPFILE@

%/.created:
		-@mkdir $(@D)
		@echo "++ do not delete, managed content ++" > $@

gr.rc:		gr.manifest.xml

gr.manifest.xml:	../win32/exe.manifest.in ../include/edbuildinfo.h
		$(PERL) ../win32/mkmanifest.pl --defines ../include/edbuildinfo.h ../win32/exe.manifest.in gr.manifest.xml

-include $(CSRC:%.c=$(D_OBJDEP)/%.Po)
-include $(CPPSRC:%.cpp=$(D_OBJDEP)/%.Po)

$(D_OBJ)/%$(O):		%.c
		$(CC) $(CFLAGS) -o $@ -c $<
		$(CCDEPEND)

$(D_OBJ)/%$(O):		%.cpp
		$(CXX) $(CXXFLAGS) -o $@ -c $<
		$(CXXDEPEND)

$(D_OBJ)/%.res:		%.rc
		$(RC) -fo $@ $<

$(D_OBJ)/%_res.o:	%.rc
		$(RC) -o $@ $<

#end

