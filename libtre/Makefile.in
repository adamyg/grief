# -*- mode: mak; indent-tabs-mode: t; tab-width: 8 -*-
# $Id: Makefile.in,v 1.15 2024/06/15 08:39:34 cvsuser Exp $
# libtre - regular expression library makefile.
#
#
# Copyright (c) 1998 - 2024, Adam Young.
# All rights reserved.
#
# This file is part of the GRIEF Editor.
#
# The GRIEF Editor is free software: you can redistribute it
# and/or modify it under the terms of the GRIEF Editor License.
#
# Redistributions of source code must retain the above copyright
# notice, and must be distributed with the license document above.
#
# Redistributions in binary form must reproduce the above copyright
# notice, and must include the license document above in
# the documentation and/or other materials provided with the
# distribution.
#
# The GRIEF Editor is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# License for more details.
# ==end==
#

@SET_MAKE@
ROOT=		@abs_top_builddir@
top_builddir=	@top_builddir@

# File extensions

O=		.o
H=		.h
A=		.a
LP=		lib

CLEAN=		*.bak *~ *.BAK *.swp *.tmp core *.core a.out
XCLEAN=

# Compilers, programs

CC=		@CC@
AR=		@AR@
RANLIB=		@RANLIB@
RM=		@RM@
PERL=		@PERL@
LIBTOOL=	@LIBTOOL@
RC=		@RC@

# Configuration

ifeq ("$(BUILD_TYPE)","")	#default
BUILD_TYPE=	debug
MAKEFLAGS+=	BUILD_TYPE=debug
endif
ifneq ("$(BUILD_TYPE)","release")
RTSUFFIX=d
endif

# Directories

D_INC=		$(ROOT)/include
D_BIN=		$(ROOT)/bin@TOOLCHAINEXT@/$(BUILD_TYPE)
D_OBJ=		$(ROOT)/obj@TOOLCHAINEXT@/$(BUILD_TYPE)/libtre
D_LIB=		$(ROOT)/lib@TOOLCHAINEXT@/$(BUILD_TYPE)

# Common flags

XFLAGS=
CFLAGS=		@CFLAGS@
ifeq ("gcc","@CC@")
CWARN=		$(filter-out -Wshadow -Wmissing-prototypes -Wsign-compare -Wunused-value, @CWARN@ $(CWALL)) -Wno-sign-compare -Wno-unused-value
CWARN+=		-Wno-free-nonheap-object
else
CWARN=		@CWARN@ $(CWALL)
endif
CDEBUG=		@CDEBUG@
CRELEASE=	@CRELEASE@
LDDEBUG=	@LDDEBUG@
LDRELEASE=	@LDRELEASE@

CINCLUDE=	-I. -I$(D_INC) @CINCLUDE@
CEXTRA=		@DEFS@ -DTRE_REGEX_T_FIELD=value

ifeq ("$(BUILD_TYPE)","release")
CFLAGS+=	$(CRELEASE) $(CWARN) $(CINCLUDE) $(CEXTRA) $(XFLAGS)
LDFLAGS=	$(LDRELEASE) @LDFLAGS@
else
CFLAGS+=	$(CDEBUG) $(CWARN) $(CINCLUDE) $(CEXTRA) $(XFLAGS)
LDFLAGS=	$(LDDEBUG) @LDFLAGS@
endif
LDLIBS=		-L$(D_LIB) @LIBS@ @LIBMALLOC@ @EXTRALIBS@

YFLAGS=		-d
ARFLAGS=	rcv
RMFLAGS=	-f
RMDFLAGS=	-rf

		   
#########################################################################################
# Targets

ifeq ("yes","@ISWIN32@")
RELIB=		$(D_LIB)/$(LP)tre_static$(A)
REDLL=		$(D_LIB)/$(LP)tre.la
else
RELIB=		$(D_LIB)/$(LP)tre$(A)
endif

VERSION=	0.8.1
VERSIONSPEC=	$(subst .,:,$(VERSION))
REPACKED=	tre-master-202406.zip
UNPACKEDLABEL=	.unpacked.tre-master

RESRC=		./tre-master/lib
REINC=		./tre-master/local_includes
XCLEAN+=	./tre.h

LIBOBJS=\
	$(D_OBJ)/tre-ast$(O)			\
	$(D_OBJ)/tre-compile$(O)		\
	$(D_OBJ)/tre-filter$(O)			\
	$(D_OBJ)/tre-match-approx$(O)		\
	$(D_OBJ)/tre-match-backtrack$(O)	\
	$(D_OBJ)/tre-match-parallel$(O)		\
	$(D_OBJ)/tre-mem$(O)			\
	$(D_OBJ)/tre-parse$(O)			\
	$(D_OBJ)/tre-stack$(O)			\
	\
	$(D_OBJ)/regcomp$(O)			\
	$(D_OBJ)/regerror$(O)			\
	$(D_OBJ)/regexec$(O)

DLLOBJS=\
	$(subst $(O),.lo,$(LIBOBJS))
ifeq ("win32","@build_os@")
DLLOBJS+=\
	$(D_OBJ)/dllmain.lo
endif

ifeq ("win32","@build_os@")
ifeq (mingw,$(findstring mingw,"@TOOLCHAIN@"))
DLLOBJS+=	$(D_OBJ)/tre_res.o
else
DLLOBJS+=	$(D_OBJ)/tre.res
endif
endif

OBJS=		$(LIBOBJS) $(DLLOBJS)
LIBS=		$(RELIB)
ifeq ("yes","@ISWIN32@")
LIBS+=		$(REDLL)
endif
TSKS=


#########################################################################################
# Rules

.PHONY:			build release debug
build:			source unpacked
unpacked:		./tre.h $(LIBS) $(TSKS) installinc

release:
		$(MAKE) BUILD_TYPE=release $(filter-out release, $(MAKECMDGOALS))
debug:
		$(MAKE) BUILD_TYPE=debug $(filter-out debug, $(MAKECMDGOALS))

$(RELIB):		CEXTRA += -D__LIBTRE_BUILD -DLIBTRE_STATIC
$(RELIB):		$(D_OBJ)/.created $(LIBOBJS)
		$(RM) $(RMFLAGS) $@ >/dev/null 2>&1
		$(AR) $(ARFLAGS) $@ $(LIBOBJS)
		$(RANLIB) $@

ifeq ("yes","@ISWIN32@")
$(REDLL):	DLLDEF = -export-symbols tre.def
endif
$(REDLL):		CEXTRA += -D__LIBTRE_BUILD -DLIBTRE_DLL
$(REDLL):		$(D_OBJ)/.created $(DLLOBJS)
		$(LIBTOOL) --mode=link $(CC) $(LDFLAGS) -o $@ $(DLLOBJS) -version-number $(VERSIONSPEC) \
			-rpath $(D_LIB) -bindir $(D_BIN) $(DLLDEF) $(LDLIBS)

source:			$(UNPACKEDLABEL)
		@$(MAKE) unpacked

./tre.h:		$(REINC)/tre.h tredecl.pl Makefile
		@echo importing tre.h ...
		@$(PERL) tredecl.pl --in=$(REINC)/tre.h

ifeq (zip,$(findstring zip,$(REPACKED)))
$(UNPACKEDLABEL):	$(REPACKED)
		@echo "do not delete, managed file" > $@
		@echo "uncompressing source $(REPACKED)"
		unzip $(REPACKED)
else
$(UNPACKEDLABEL):	$(REPACKED)
		@echo "do not delete, managed file" > $@
		@echo "unpacking source $(REPACKED)"
		@gzip -c -d $(REPACKED) | tar -xvf -
endif

installinc:
		@echo publishing headers ...
		@-cp tre.h ../include
		@-cp tre-config.h ../include

%/.created:
		-@mkdir $(@D)
		@echo "do not delete, managed directory" > $@

clean:
		-@$(RM) $(RMFLAGS) $(BAK) $(TSKS) $(LIBS) $(OBJS) $(CLEAN) $(XCLEAN) >/dev/null 2>&1

##
$(D_OBJ)/%$(O):		$(RESRC)/%.c
		$(CC) $(CFLAGS) -I$(RESRC) -o $@ -c $<

$(D_OBJ)/%$(O):		%.c
		$(CC) $(CFLAGS) -I$(RESRC) -o $@ -c $<

##
$(D_OBJ)/%.lo:		$(RESRC)/%.c
		$(LIBTOOL) --mode=compile $(CC) $(CFLAGS) -I$(RESRC) -o $@ -c $<

$(D_OBJ)/%.lo:		%.c
		$(LIBTOOL) --mode=compile $(CC) $(CFLAGS) -I$(RESRC) -o $@ -c $<

##
$(D_OBJ)/%_res.o:	%.rc
		$(RC) -o $@ $<

$(D_OBJ)/%.res:		%.rc
		$(RC) -fo $@ $<

#end

