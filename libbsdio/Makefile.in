# -*- mode: mak; indent-tabs-mode: t; tab-width: 8 -*-
# $Id: Makefile.in,v 1.14 2024/05/03 14:35:16 cvsuser Exp $
# libbsdio makefile.
#
#
# Copyright (c) 1998 - 2024, Adam Young.
# All rights reserved.
#
# This file is part of the GRIEF Editor.
#
# The GRIEF Editor is free software: you can redistribute it
# and/or modify it under the terms of the GRIEF Editor License.
#
# Redistributions of source code must retain the above copyright
# notice, and must be distributed with the license document above.
#
# Redistributions in binary form must reproduce the above copyright
# notice, and must include the license document above in
# the documentation and/or other materials provided with the
# distribution.
#
# The GRIEF Editor is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# License for more details.
# ==end==
#

@SET_MAKE@
ROOT=		@abs_top_builddir@
top_builddir=	@top_builddir@

# File extensions

E=
C=		.c
O=		.o
H=		.h
A=		.a
LP=		lib

CLEAN=		*.bak *~ *.BAK *.swp *.tmp core *.core a.out
XCLEAN=

# Compilers, programs

CC=		@CC@
CXX=		@CXX@
AR=		@AR@
RANLIB=		@RANLIB@
PERL=		@PERL@
LIBTOOL=	@LIBTOOL@
RM=		@RM@

# Configuration

QUIETOUT:=	>/dev/null 2>&1
ifeq ($(VERBOSE),1)
QUIETOUT:=
else ifeq ($(VERBOSE),0)
else ifeq ($(VERBOSE),)
else
$(error VERBOSE: unexpected value 0 or 1 required, $(VERBOSE) given]))
endif

ifeq ("$(BUILD_TYPE)","")	#default
BUILD_TYPE=	debug
MAKEFLAGS+=	BUILD_TYPE=debug
endif
ifneq ("$(BUILD_TYPE)","release")
RTSUFFIX=d
endif

# Directories

D_INC=		$(ROOT)/include
D_BIN=		$(ROOT)/bin@TOOLCHAINEXT@/$(BUILD_TYPE)
D_OBJ=		$(ROOT)/obj@TOOLCHAINEXT@/$(BUILD_TYPE)/libbsdio
D_LIB=		$(ROOT)/lib@TOOLCHAINEXT@/$(BUILD_TYPE)

# Common flags

XFLAGS=
CFLAGS=		@CFLAGS@
CWARN=		@CWARN@
CDEBUG=		@CDEBUG@
CRELEASE=	@CRELEASE@
LDDEBUG=	@LDDEBUG@
LDRELEASE=	@LDRELEASE@

CINCLUDE=	-I. -I$(D_INC) @CINCLUDE@
CEXTRA=		@DEFS@
CEXTRA+=	-D__POSIX_VISIBLE=199506 -D__BSTDIO_INTERNAL -DFLOATING_POINT

ifeq ("$(BUILD_TYPE)","release")
CFLAGS+=	$(CRELEASE) $(CWARN) $(CINCLUDE) $(CEXTRA) $(XFLAGS)
LDFLAGS=	$(LDRELEASE) @LDFLAGS@
else
CFLAGS+=	$(CDEBUG) $(CWARN) $(CINCLUDE) $(CEXTRA) $(XFLAGS)
LDFLAGS=	$(LDDEBUG) @LDFLAGS@
endif
ifeq (gcc,$(findstring gcc,$(CC)))
ifeq ("linux","@build_os@")
LDFLAGS+=	-rdynamic
endif
endif

LDLIBS=		-L$(D_LIB) $(LINKLIBS) @LIBS@ @LIBMALLOC@ @LIBTHREAD@ @EXTRALIBS@

YFLAGS=		-d
ARFLAGS=	rcv
RMFLAGS=	-f
RMDFLAGS=	-rf


#########################################################################################
# Targets

TARGET=		bstdio$(E)
LIBROOT=	bsdio

OBJS=\
	$(D_OBJ)/bstdio$(O)

LIBOBJS=\
	$(D_OBJ)/asprintf$(O)		\
	$(D_OBJ)/clrerr$(O)		\
	$(D_OBJ)/fclose$(O)		\
	$(D_OBJ)/fdopen$(O)		\
	$(D_OBJ)/feof$(O)		\
	$(D_OBJ)/ferror$(O)		\
	$(D_OBJ)/fflush$(O)		\
	$(D_OBJ)/fgetc$(O)		\
	$(D_OBJ)/fgetln$(O)		\
	$(D_OBJ)/fgetpos$(O)		\
	$(D_OBJ)/fgets$(O)		\
	$(D_OBJ)/fileno$(O)		\
	$(D_OBJ)/flags$(O)		\
	$(D_OBJ)/flockfile$(O)		\
	$(D_OBJ)/fopen$(O)		\
	$(D_OBJ)/fprintf$(O)		\
	$(D_OBJ)/fpurge$(O)		\
	$(D_OBJ)/fputc$(O)		\
	$(D_OBJ)/fputs$(O)		\
	$(D_OBJ)/fread$(O)		\
	$(D_OBJ)/freopen$(O)		\
	$(D_OBJ)/fscanf$(O)		\
	$(D_OBJ)/fseek$(O)		\
	$(D_OBJ)/fsetpos$(O)		\
	$(D_OBJ)/ftell$(O)		\
	$(D_OBJ)/funopen$(O)		\
	$(D_OBJ)/fvwrite$(O)		\
	$(D_OBJ)/fwalk$(O)		\
	$(D_OBJ)/fwrite$(O)		\
	$(D_OBJ)/getc$(O)		\
	$(D_OBJ)/getline$(O)		\
	$(D_OBJ)/putc$(O)		\
	$(D_OBJ)/putw$(O)		\
	$(D_OBJ)/rewind$(O)		\
	$(D_OBJ)/setbuf$(O)		\
	$(D_OBJ)/setbuffer$(O)		\
	$(D_OBJ)/setvbuf$(O)		\
	$(D_OBJ)/stdio$(O)		\
	$(D_OBJ)/ungetc$(O)		\
	$(D_OBJ)/vasprintf$(O)		\
	$(D_OBJ)/vsnprintf$(O)		\
	$(D_OBJ)/vsprintf$(O)		\
	$(D_OBJ)/vsscanf$(O)		\
	\
	$(D_OBJ)/snprintf$(O)		\
	$(D_OBJ)/sprintf$(O)		\
	$(D_OBJ)/vfprintf$(O)		\
	$(D_OBJ)/sscanf$(O)		\
	$(D_OBJ)/vfscanf$(O)		\
	\
	$(D_OBJ)/findfp$(O)		\
	$(D_OBJ)/makebuf$(O)		\
	$(D_OBJ)/refill$(O)		\
	$(D_OBJ)/rget$(O)		\
	$(D_OBJ)/wbuf$(O)		\
	$(D_OBJ)/wsetup$(O)

LIBRARY=	$(D_LIB)/$(LP)$(LIBROOT)$(A)


#########################################################################################
# Rules

.PHONY:			build release debug
build:			$(LIBRARY) $(D_BIN)/$(TARGET)

release:
		$(MAKE) BUILD_TYPE=release $(filter-out release, $(MAKECMDGOALS))
debug:
		$(MAKE) BUILD_TYPE=debug $(filter-out debug, $(MAKECMDGOALS))

XCLEAN +=	$(basename $(D_BIN)/$(TARGET)).map
$(D_BIN)/$(TARGET):	MAPFILE=$(basename $@).map
$(D_BIN)/$(TARGET):	LINKLIBS=-lmisc
$(D_BIN)/$(TARGET):	$(OBJS)
		$(LIBTOOL) --mode=link $(CXX) $(LDFLAGS) -o $@ $(OBJS) $(LIBRARY) $(LDLIBS) @LDMAPFILE@

$(LIBRARY):		$(D_OBJ)/.created $(LIBOBJS)
		$(RM) $(RMFLAGS) $@
		$(AR) $(ARFLAGS) $@ $(LIBOBJS)
		$(RANLIB) $@

CLEAN +=

$(D_OBJ)/.created:
		-@mkdir $(D_OBJ)
		@echo "do not create" > $@

clean:
		@echo $(BUILD_TYPE) clean
		-$(LIBTOOL) --mode=clean $(RM) $(D_BIN)/$(TARGET)
		-@$(RM) $(RMFLAGS) $(LIBRARY) $(LIBOBJS) $(OBJS) $(QUIETOUT)
		-@$(RM) $(RMFLAGS) $(BAK) $(CLEAN) $(XCLEAN) $(QUIETOUT)

$(D_OBJ)/%$(O):		%$(C)
		$(CC) $(CFLAGS) -o $@ -c $<

#end
