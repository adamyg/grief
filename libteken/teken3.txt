TEKEN(3)                   Library Functions Manual                   TEKEN(3)

NNAAMMEE
     tteekkeenn - xterm-like terminal emulation interface

LLIIBBRRAARRYY
     library ``libteken''

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<tteekkeenn..hh>>

     _v_o_i_d
     tteekkeenn__iinniitt(_t_e_k_e_n___t _*_t, _c_o_n_s_t _t_e_k_e_n___f_u_n_c_s___t _*_f_u_n_c_s, _v_o_i_d _*_t_h_u_n_k);

     _v_o_i_d
     tteekkeenn__iinnppuutt(_t_e_k_e_n___t _*_t, _c_o_n_s_t _v_o_i_d _*_b_u_f, _s_i_z_e___t _n_b_y_t_e_s);

     _c_o_n_s_t _t_e_k_e_n___p_o_s___t _*
     tteekkeenn__ggeett__wwiinnssiizzee(_t_e_k_e_n___t _*_t);

     _v_o_i_d
     tteekkeenn__sseett__wwiinnssiizzee(_t_e_k_e_n___t _*_t, _c_o_n_s_t _t_e_k_e_n___p_o_s___t _*_s_i_z_e);

     _c_o_n_s_t _t_e_k_e_n___p_o_s___t _*
     tteekkeenn__ggeett__ccuurrssoorr(_t_e_k_e_n___t _*_t);

     _v_o_i_d
     tteekkeenn__sseett__ccuurrssoorr(_t_e_k_e_n___t _*_t, _c_o_n_s_t _t_e_k_e_n___p_o_s___t _*_p_o_s);

     _c_o_n_s_t _t_e_k_e_n___a_t_t_r___t _*
     tteekkeenn__ggeett__ccuurraattttrr(_t_e_k_e_n___t _*_t);

     _v_o_i_d
     tteekkeenn__sseett__ccuurraattttrr(_t_e_k_e_n___t _*_t, _c_o_n_s_t _t_e_k_e_n___a_t_t_r___t _*_a_t_t_r);

     _c_o_n_s_t _t_e_k_e_n___a_t_t_r___t _*
     tteekkeenn__ggeett__ddeeffaattttrr(_t_e_k_e_n___t _*_t);

     _v_o_i_d
     tteekkeenn__sseett__ddeeffaattttrr(_t_e_k_e_n___t _*_t, _c_o_n_s_t _t_e_k_e_n___a_t_t_r___t _*_a_t_t_r);

     _c_o_n_s_t _c_h_a_r _*
     tteekkeenn__ggeett__sseeqquueennccee(_t_e_k_e_n___t _*_t, _u_n_s_i_g_n_e_d _i_n_t _i_d);

     _t_e_k_e_n___c_o_l_o_r___t
     tteekkeenn__225566ttoo88(_t_e_k_e_n___c_o_l_o_r___t _c_o_l_o_r);

     _v_o_i_d
     tteekkeenn__ggeett__ddeeffaattttrr__ccoonnss2255(_t_e_k_e_n___t _*_t, _i_n_t _*_f_g, _i_n_t _*_b_g);

     _v_o_i_d
     tteekkeenn__sseett__88bbiitt(_t_e_k_e_n___t _*_t);

     _v_o_i_d
     tteekkeenn__sseett__ccoonnss2255(_t_e_k_e_n___t _*_t);

DDEESSCCRRIIPPTTIIOONN
     The tteekkeenn library implements the input parser of a 256-color xterm-like
     terminal.  It converts a stream of UTF-8 encoded characters into a series
     of primitive drawing instructions that can be used by a console driver or
     terminal emulator to render a terminal application.

     The tteekkeenn__iinniitt() function is used to initialize terminal state object _t,
     having type _t_e_k_e_n___t.  The supplied _t_e_k_e_n___f_u_n_c_s___t structure _f_u_n_c_s contains
     a set of callback functions, which are called when supplying data to
     tteekkeenn__iinnppuutt().  The _t_h_u_n_k argument stores an arbitrary pointer, which is
     passed to each invocation of the callback functions.

     The _t_e_k_e_n___f_u_n_c_s___t structure stores the following callbacks:

           typedef struct {
                   tf_bell_t     *tf_bell;     /* Audible/visible bell. */
                   tf_cursor_t   *tf_cursor;   /* Move cursor to x/y. */
                   tf_putchar_t  *tf_putchar;  /* Put Unicode character at x/y. */
                   tf_fill_t     *tf_fill;     /* Fill rectangle with character. */
                   tf_copy_t     *tf_copy;     /* Copy rectangle to new location. */
                   tf_param_t    *tf_param;    /* Miscellaneous options. */
                   tf_respond_t  *tf_respond;  /* Send response string to user. */
           } teken_funcs_t;

     All callbacks must be provided, though unimplemented callbacks may some
     times be sufficient.  The actual types of these callbacks can be found in
     <_t_e_k_e_n_._h>.

     By default, tteekkeenn__iinniitt() initializes the _t_e_k_e_n___t structure to emulate a
     terminal having 24 rows and 80 columns.  The tteekkeenn__ggeett__wwiinnssiizzee() and
     tteekkeenn__sseett__wwiinnssiizzee() functions can be used to obtain and modify the
     dimensions of the terminal.

     Even though the cursor position is normally controlled by input of data
     through tteekkeenn__iinnppuutt() and returned by the ttff__ccuurrssoorr() callback, it can be
     obtained and modified manually using the tteekkeenn__ggeett__ccuurrssoorr() and
     tteekkeenn__sseett__ccuurrssoorr() functions.  The same holds for tteekkeenn__ggeett__ccuurraattttrr() and
     tteekkeenn__sseett__ccuurraattttrr(), which can be used to change the currently selected
     font attributes and foreground and background color.

     By default, tteekkeenn emulates a white-on-black terminal, which means the
     default foreground color is white, while the background color is black.
     These defaults can be modified using tteekkeenn__ggeett__ddeeffaattttrr() and
     tteekkeenn__sseett__ddeeffaattttrr().

     The tteekkeenn__ggeett__sseeqquueennccee() function is a utility function that can be used
     to obtain escape sequences of special keyboard keys, generated by user
     input.  The _i_d parameter must be one of the TKEY_* parameters listed in
     <_t_e_k_e_n_._h>.

LLEEGGAACCYY FFEEAATTUURREESS
     This library also provides a set of functions that shouldn't be used in
     any modern applications.

     The tteekkeenn__225566ttoo88() function converts a color code to one of the 8 primary
     colors, allowing the terminal to be rendered on graphics hardware that
     only supports 8 or 16 colors (e.g. VGA).

     The tteekkeenn__ggeett__ddeeffaattttrr__ccoonnss2255() function obtains the default terminal
     attributes as a pair of foreground and background colors, using ANSI
     color numbering.

     The tteekkeenn__sseett__88bbiitt() function disables UTF-8 processing and switches to
     8-bit character mode, which can be used to support character sets like
     CP437 and ISO-8859-1.

     The tteekkeenn__sseett__ccoonnss2255() function switches terminal emulation to cons25,
     which is used by versions of FreeBSD prior to 9.0.

SSEEEE AALLSSOO
     ncurses(3), termcap(3), syscons(4)

HHIISSTTOORRYY
     The tteekkeenn library appeared in FreeBSD 8.0, though it was only available
     and used inside the kernel.  In FreeBSD 9.0, the tteekkeenn library appeared
     in userspace.

AAUUTTHHOORRSS
     Ed Schouten <ed@FreeBSD.org>

SSEECCUURRIITTYY CCOONNSSIIDDEERRAATTIIOONNSS
     The ttff__rreessppoonndd() callback is used to respond to device status requests
     commands generated by an application.  In the past, there have been
     various security issues, where a malicious application sends a device
     status request before termination, causing the generated response to be
     interpreted by applications such as sh(1).

     tteekkeenn only implements a small subset of responses which are unlikely to
     cause any harm.  Still, it is advised to leave ttff__rreessppoonndd()
     unimplemented.

GRIEF Edit 3.2                    May 9, 2011                   GRIEF Edit 3.2
