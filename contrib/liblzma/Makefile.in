# -*- mode: mak; indent-tabs-mode: t; tab-width: 8 -*-
# $Id: Makefile.in,v 1.17 2025/02/07 03:03:20 cvsuser Exp $
# liblzma makefile and grxz
#
#
#

@SET_MAKE@
ROOT=		@abs_top_builddir@
top_builddir=	@top_builddir@

# File extensions

C=		.c
E=
O=		.o
H=		.h
A=		.a
LP=		lib

CLEAN=		*.bak *~ *.BAK *.swp *.tmp core *.core a.out
XCLEAN=

# Compilers, programs

CC=		@CC@
AR=		@AR@
RANLIB=		@RANLIB@
RM=		@RM@
PERL=		@PERL@
LIBTOOL=	@LIBTOOL@

# Configuration

ifeq ("$(BUILD_TYPE)","")	#default
BUILD_TYPE=	debug
MAKEFLAGS+=	BUILD_TYPE=debug
endif
ifneq ("$(BUILD_TYPE)","release")
RTSUFFIX=d
endif

# Directories

D_INC=		$(ROOT)/include
D_BIN=		$(ROOT)/bin@TOOLCHAINEXT@/$(BUILD_TYPE)
D_OBJ=		$(ROOT)/obj@TOOLCHAINEXT@/$(BUILD_TYPE)/liblzma
D_LIB=		$(ROOT)/lib@TOOLCHAINEXT@/$(BUILD_TYPE)

# Common flags

XFLAGS=
CFLAGS=		@CFLAGS@
ifeq ("gcc","@CC@")
CWARN=		$(filter-out -Wshadow -Wmissing-prototypes -Wsign-compare -Wimplicit-fallthrough, @CWARN@)
CWARN+=		-Wno-sign-compare -Wno-implicit-fallthrough -Wno-type-limits -Wno-unused-but-set-variable -Wno-implicit-function-declaration
else
CWARN=		@CWARN@
endif
CDEBUG=		@CDEBUG@
CRELEASE=	@CRELEASE@
LDDEBUG=	@LDDEBUG@
LDRELEASE=	@LDRELEASE@

CINCLUDE=	-I. -I$(D_INC) @CINCLUDE@

CEXTRA=		@DEFS@
ifeq (yes,$(findstring yes,"@ISWIN32@ or @ISWIN64@"))
CEXTRA+=	-DWIN32
endif

ifeq ("$(BUILD_TYPE)","release")
CFLAGS+=	$(CRELEASE) $(CWARN) $(CINCLUDE) $(CEXTRA) $(XFLAGS)
LDFLAGS=	$(LDRELEASE) @LDFLAGS@
else
CFLAGS+=	$(CDEBUG) $(CWARN) $(CINCLUDE) $(CEXTRA) $(XFLAGS)
LDFLAGS=	$(LDDEBUG) @LDFLAGS@
endif
LDLIBS=		-L$(D_LIB) @LIBS@ @EXTRALIBS@

YFLAGS=		-d
ARFLAGS=	rcv
RMFLAGS=	-f
RMDFLAGS=	-rf


#########################################################################################
# Targets

LZMALIB=	$(D_LIB)/$(LP)lzma_static$(A)
LZMADLL=	$(D_LIB)/$(LP)lzma.la
LZMAUTIL=	$(D_BIN)/grxz$(E)

#ifeq ("gcc","@CC@")
#VERSION=	5.2.5
#LZMAPACKED=	xz-$(VERSION).tgz
#else
VERSION=	5.2.3
LZMAPACKED=	xz-$(VERSION).gr.tgz
#endif
LZMASRC=	./xz-$(VERSION)/src
LIBLZMASRC=	./xz-$(VERSION)/src/liblzma
LIBINC=		\
	-I$(LZMASRC)/common \
	-I$(LIBLZMASRC)/api \
	-I$(LIBLZMASRC)/common \
	-I$(LIBLZMASRC)/check \
	-I$(LIBLZMASRC)/lz \
	-I$(LIBLZMASRC)/lzma \
	-I$(LIBLZMASRC)/rangecoder \
	-I$(LIBLZMASRC)/delta \
	-I$(LIBLZMASRC)/simple

VERSIONSPEC=	$(subst .,:,$(VERSION))

VPATH=		$(LIBLZMASRC)/common
LIBOBJS=\
	$(D_OBJ)/common$(O) \
	$(D_OBJ)/block_util$(O) \
	$(D_OBJ)/easy_preset$(O) \
	$(D_OBJ)/filter_common$(O) \
	$(D_OBJ)/index$(O) \
	$(D_OBJ)/stream_flags_common$(O) \
	$(D_OBJ)/vli_size$(O) \
	$(D_OBJ)/alone_encoder$(O) \
	$(D_OBJ)/block_buffer_encoder$(O) \
	$(D_OBJ)/block_encoder$(O) \
	$(D_OBJ)/block_header_encoder$(O) \
	$(D_OBJ)/easy_buffer_encoder$(O) \
	$(D_OBJ)/easy_encoder$(O) \
	$(D_OBJ)/easy_encoder_memusage$(O) \
	$(D_OBJ)/filter_buffer_encoder$(O) \
	$(D_OBJ)/filter_encoder$(O) \
	$(D_OBJ)/filter_flags_encoder$(O) \
	$(D_OBJ)/index_encoder$(O) \
	$(D_OBJ)/stream_buffer_encoder$(O) \
	$(D_OBJ)/stream_encoder$(O) \
	$(D_OBJ)/stream_flags_encoder$(O) \
	$(D_OBJ)/vli_encoder$(O) \
	$(D_OBJ)/alone_decoder$(O) \
	$(D_OBJ)/auto_decoder$(O) \
	$(D_OBJ)/block_buffer_decoder$(O) \
	$(D_OBJ)/block_decoder$(O) \
	$(D_OBJ)/block_header_decoder$(O) \
	$(D_OBJ)/easy_decoder_memusage$(O) \
	$(D_OBJ)/filter_buffer_decoder$(O) \
	$(D_OBJ)/filter_decoder$(O) \
	$(D_OBJ)/filter_flags_decoder$(O) \
	$(D_OBJ)/index_decoder$(O) \
	$(D_OBJ)/index_hash$(O) \
	$(D_OBJ)/stream_buffer_decoder$(O) \
	$(D_OBJ)/stream_decoder$(O) \
	$(D_OBJ)/stream_flags_decoder$(O) \
	$(D_OBJ)/vli_decoder$(O) \
	$(D_OBJ)/outqueue$(O) \
	\
	$(D_OBJ)/hardware_physmem$(O) \
	$(D_OBJ)/tuklib_physmem$(O)

##	$(D_OBJ)/hardware_cputhreads$(O) \
##	$(D_OBJ)/stream_encoder_mt$(O) \

VPATH+=		$(LIBLZMASRC)/check
LIBOBJS+=\
	$(D_OBJ)/check$(O) \
	$(D_OBJ)/crc32_table$(O) \
	$(D_OBJ)/crc64_table$(O) \
	$(D_OBJ)/sha256$(O) \
	$(D_OBJ)/crc32_fast$(O) \
	$(D_OBJ)/crc64_fast$(O)

VPATH+=		$(LIBLZMASRC)/lz
LIBOBJS+=\
	$(D_OBJ)/lz_encoder$(O) \
	$(D_OBJ)/lz_encoder_mf$(O) \
	$(D_OBJ)/lz_decoder$(O)

VPATH+=		$(LIBLZMASRC)/lzma
LIBOBJS+=\
	$(D_OBJ)/lzma_encoder$(O) \
	$(D_OBJ)/lzma_encoder_presets$(O) \
	$(D_OBJ)/lzma_encoder_optimum_fast$(O) \
	$(D_OBJ)/lzma_encoder_optimum_normal$(O) \
	$(D_OBJ)/fastpos_table$(O) \
	$(D_OBJ)/lzma_decoder$(O) \
	$(D_OBJ)/lzma2_encoder$(O) \
	$(D_OBJ)/lzma2_decoder$(O)

VPATH+=		$(LIBLZMASRC)/rangecoder
LIBOBJS+=\
	$(D_OBJ)/price_table$(O)

VPATH+=		$(LIBLZMASRC)/delta
LIBOBJS+=\
	$(D_OBJ)/delta_common$(O) \
	$(D_OBJ)/delta_encoder$(O) \
	$(D_OBJ)/delta_decoder$(O)

VPATH+=		$(LIBLZMASRC)/simple
LIBOBJS+=\
	$(D_OBJ)/simple_coder$(O) \
	$(D_OBJ)/simple_encoder$(O) \
	$(D_OBJ)/simple_decoder$(O) \
	$(D_OBJ)/x86$(O) \
	$(D_OBJ)/powerpc$(O) \
	$(D_OBJ)/ia64$(O) \
	$(D_OBJ)/arm$(O) \
	$(D_OBJ)/armthumb$(O) \
	$(D_OBJ)/sparc$(O)

DLLOBJS=\
	$(subst $(O),.lo,$(LIBOBJS))

VPATH+=		$(LZMASRC)/xz $(LZMASRC)/common
UTILOBJS=\
	$(D_OBJ)/args$(O) \
	$(D_OBJ)/coder$(O) \
	$(D_OBJ)/file_io$(O) \
	$(D_OBJ)/hardware$(O) \
	$(D_OBJ)/list$(O) \
	$(D_OBJ)/main$(O) \
	$(D_OBJ)/message$(O) \
	$(D_OBJ)/options$(O) \
	$(D_OBJ)/signals$(O) \
	$(D_OBJ)/suffix$(O) \
	$(D_OBJ)/util$(O) \
	$(D_OBJ)/mytime$(O) \
	$(D_OBJ)/tuklib_open_stdxxx$(O) \
	$(D_OBJ)/tuklib_progname$(O) \
	$(D_OBJ)/tuklib_exit$(O) \
	$(D_OBJ)/tuklib_mbstr_width$(O) \
	$(D_OBJ)/tuklib_mbstr_fw$(O)

#VPATH+=	./win32
#LIBINC+=	-I./win32
#UTILOBJS+=\
#	$(D_OBJ)/getopt_long$(O)

OBJS=		$(LIBOBJS) $(DLLOBJS) $(UTILOBJS)
LIBS=		$(LZMALIB) $(LZMADLL)
TSKS=		$(LZMAUTIL)


#########################################################################################
# Rules

#FIXME
LZMA=no
ifeq ("@TOOLCHAIN@","owc20")
else ifeq ("@TOOLCHAIN@","owc19")
else ifeq ("@TOOLCHAIN@","vs170_x64")
LZMA=yes
else ifeq ("@TOOLCHAIN@","vs170")
LZMA=yes
else ifeq ("@TOOLCHAIN@","vs160_x64")
LZMA=yes
else ifeq ("@TOOLCHAIN@","vs160")
LZMA=yes
else ifeq ("@TOOLCHAIN@","vs150")
LZMA=yes
else ifeq ("@TOOLCHAIN@","vs140")
LZMA=yes
else ifeq (mingw,$(findstring mingw,"@TOOLCHAIN@"))
LZMA=yes
endif

.PHONY:			build release debug
ifeq "$(LZMA)" 'yes'
build:			source unpacked
else
build:
		@echo liblzma not available ...
endif

unpacked:		$(LIBS) $(TSKS) installinc

release:
		$(MAKE) BUILD_TYPE=release $(filter-out release, $(MAKECMDGOALS))
debug:
		$(MAKE) BUILD_TYPE=debug $(filter-out debug, $(MAKECMDGOALS))

$(LZMALIB):		CEXTRA += -D__LIBLZMA_BUILD -DLIBLZMA_STATIC
$(LZMALIB):		$(D_OBJ)/.created $(LIBOBJS)
		$(RM) $(RMFLAGS) $@ >/dev/null 2>&1
		$(AR) $(ARFLAGS) $@ $(LIBOBJS)
		$(RANLIB) $@

$(LZMADLL):		CEXTRA += -D__LIBLZMA_BUILD -DLIBLZMA_DYNAMIC
$(LZMADLL):		MAPFILE=$(basename $@).map
$(LZMADLL):		$(DLLOBJS) liblzma.sym
		$(LIBTOOL) --mode=link $(CC) $(LDFLAGS) -o $@ $^ -version-number $(VERSIONSPEC) \
			-rpath $(D_LIB) -bindir $(D_BIN) -export-symbols=liblzma.sym $(LDLIBS) @LDMAPFILE@

$(LZMAUTIL):		$(UTILOBJS)
		$(LIBTOOL) --mode=link $(CC) $(CC) $(LDFLAGS) $^ -o $@ $(D_LIB)/liblzma$(A) $(LDLIBS)

source:			.unpacked.$(VERSION)
		$(MAKE) unpacked

.unpacked.$(VERSION):	$(LZMAPACKED)
		@echo "do not delete, managed file" > $@
		@echo "unpacking source $(LZMAPACKED)"
		@gzip -c -d $(LZMAPACKED) | tar -xvf -

installinc:		../include/.created ../include/lzma/.created
		@echo publishing headers 'lzma.h and lzma/*.h' ...
		@-cp $(LIBLZMASRC)/api/lzma.h ../include
		@-cp $(LIBLZMASRC)/api/lzma/*.h ../include/lzma

%/.created:
		-@mkdir $(@D)
		@echo "do not delete, managed directory" > $@

clean:
		@echo $(BUILD_TYPE) clean
		-@$(RM) $(RMFLAGS) $(BAK) $(TSKS) $(LIBS) $(CLEAN) $(XCLEAN) >nul 2>&1
		-@$(LIBTOOL) --mode=clean $(RM) $(DLLOBJS) >nul 2>&1
		-@$(RM) $(LIBOBJS) $(UTILOBJS) >nul 2>&1

$(D_OBJ)/%$(O):		%$(C)
		$(CC) $(LIBINC) $(CFLAGS) -o $@ -c $<

$(D_OBJ)/%.lo:		%.c
		$(LIBTOOL) --mode=compile $(CC) $(LIBINC) $(CFLAGS) -o $@ -c $<

#end
