# -*- mode: mak; indent-tabs-mode: t; tab-width: 8 -*-
# $Id: Makefile.in,v 1.21 2022/05/28 14:19:59 cvsuser Exp $
# libhunspell, hunspell, hzip and hunzip makefile
#
#
#

@SET_MAKE@
ROOT=		@abs_top_builddir@
top_builddir=	@top_builddir@

# File extensions

E=
O=		.o
H=		.h
A=		.a
LP=		lib

CLEAN=		*.bak *~ *.BAK *.swp *.tmp core *.core a.out
XCLEAN=

# Compilers, programs

CC=		@CC@
CXX=		@CXX@
AR=		@AR@
RANLIB=		@RANLIB@
RM=		@RM@
PERL=		@PERL@
LIBTOOL=	@LIBTOOL@

# Configuration

ifeq ("$(BUILD_TYPE)","")	#default
BUILD_TYPE=	debug
MAKEFLAGS+=	BUILD_TYPE=debug
endif
ifneq ("$(BUILD_TYPE)","release")
RTSUFFIX=d
endif

# Directories

D_INC=		$(ROOT)/include
D_BIN=		$(ROOT)/bin@TOOLCHAINEXT@/$(BUILD_TYPE)
D_OBJ=		$(ROOT)/objects@TOOLCHAINEXT@/$(BUILD_TYPE)/libhunspell
D_LIB=		$(ROOT)/lib@TOOLCHAINEXT@/$(BUILD_TYPE)

# Common flags

XFLAGS=
CFLAGS=		@CFLAGS@
CWARN=		@CWARN@
CDEBUG=		@CDEBUG@
CRELEASE=	@CRELEASE@
CXXFLAGS=	@CXXFLAGS@
CXXWARN=	@CXXWARN@
ifeq ("gcc","@CC@")
CXXWARN=	-Wno-conversion-null -Wno-deprecated-declarations
endif

CXXDEBUG=	@CXXDEBUG@
ifeq ("$(CXXDEBUG)","")
CXXDEBUG=	$(CDEBUG)
endif
CXXRELEASE=	@CXXRELEASE@
ifeq ("$(CXXRELEASE)","")
CXXRELEASE=	$(CRELEASE)
endif

LDDEBUG=	@LDDEBUG@
LDRELEASE=	@LDRELEASE@

CINCLUDE=	-I. -I./win32 -I$(D_INC)
CEXTRA=		@DEFS@
ifeq ("yes","@ISWIN32@")
CEXTRA+=	-D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE
endif

ifeq ("$(BUILD_TYPE)","release")
CFLAGS+=	$(CRELEASE) $(CWARN) $(CINCLUDE) $(CEXTRA) $(XFLAGS)
CXXFLAGS+=	$(CXXRELEASE) $(CXXWARN) $(CINCLUDE) @CXXINCLUDE@ $(CEXTRA) $(XFLAGS)
LDFLAGS=	$(LDRELEASE) @LDFLAGS@
else
CFLAGS+=	$(CDEBUG) $(CWARN) $(CINCLUDE) $(CEXTRA) $(XFLAGS)
CXXFLAGS+=	$(CXXDEBUG) $(CXXWARN) $(CINCLUDE) @CXXINCLUDE@ $(CEXTRA) $(XFLAGS)
LDFLAGS=	$(LDDEBUG) @LDFLAGS@
endif
LDLIBS=		-L$(D_LIB) $(filter-out libw32.%, @LIBS@ @EXTRALIBS@)

YFLAGS=		-d
ARFLAGS=	rcv
RMFLAGS=	-f
RMDFLAGS=	-rf


#########################################################################################
# Targets

HUNSPELLLIB=	$(D_LIB)/$(LP)hunspell_static$(A)
HUNSPELLDLL=	$(D_LIB)/$(LP)hunspell.la

HUNSPELLVER=1.7.0
ifeq ("@TOOLCHAIN@","owc20")
HUNSPELLVER=1.3.3
else ifeq ("@TOOLCHAIN@","owc19")
HUNSPELLVER=1.3.3
else ifeq ("@TOOLCHAIN@","vs170")
else ifeq ("@TOOLCHAIN@","vs160")
else ifeq ("@TOOLCHAIN@","vs150")
else ifeq ("@TOOLCHAIN@","vs140")
else ifeq ("@TOOLCHAIN@","mingw")
endif

ifeq ("1.7.0","$(HUNSPELLVER)")
VERSION=	1.7.0
VERSIONSPEC=	$(subst .,:,$(VERSION))
PACKED=		hunspell-$(VERSION).tgz
else
VERSION=	1.3.3
VERSIONSPEC=	$(subst .,:,$(VERSION))
PACKED= 	hunspell-$(VERSION).patched.tgz
endif

HUNSPELLSRC=	./hunspell-$(VERSION)/src/hunspell
PARSERSSRC=	./hunspell-$(VERSION)/src/parsers
TOOLSSRC=	./hunspell-$(VERSION)/src/tools

ifeq ("1.7.0","$(VERSION)")
LIBOBJS=\
	$(D_OBJ)/lib_affentry$(O)		\
	$(D_OBJ)/lib_affixmgr$(O)		\
	$(D_OBJ)/lib_csutil$(O)			\
	$(D_OBJ)/lib_filemgr$(O)		\
	$(D_OBJ)/lib_hashmgr$(O)		\
	$(D_OBJ)/lib_hunspell$(O)		\
	$(D_OBJ)/lib_hunzip$(O)			\
	$(D_OBJ)/lib_phonet$(O)			\
	$(D_OBJ)/lib_replist$(O)		\
	$(D_OBJ)/lib_suggestmgr$(O)		\
	\
	$(D_OBJ)/hunspell_mktemp$(O)
else
LIBOBJS=\
	$(D_OBJ)/lib_affentry$(O)		\
	$(D_OBJ)/lib_affixmgr$(O)		\
	$(D_OBJ)/lib_csutil$(O)			\
	$(D_OBJ)/lib_dictmgr$(O)		\
	$(D_OBJ)/lib_filemgr$(O)		\
	$(D_OBJ)/lib_hashmgr$(O)		\
	$(D_OBJ)/lib_hunspell$(O)		\
	$(D_OBJ)/lib_hunzip$(O)			\
	$(D_OBJ)/lib_phonet$(O)			\
	$(D_OBJ)/lib_replist$(O)		\
	$(D_OBJ)/lib_suggestmgr$(O)
endif

DLLOBJS=\
	$(D_OBJ)/hunspell_dllmain.lo		\
	$(D_OBJ)/hunspell_dllc.lo		\
	$(D_OBJ)/hunspell_dlls.lo		\
	$(subst $(O),.lo,$(LIBOBJS))

HUNSPELLOBJS=\
	$(D_OBJ)/hunspell$(O)			\
	$(D_OBJ)/firstparser$(O)		\
	$(D_OBJ)/htmlparser$(O)			\
	$(D_OBJ)/latexparser$(O)		\
	$(D_OBJ)/manparser$(O)			\
	$(D_OBJ)/textparser$(O)

#1.3.3
HUNSPELLOBJS+=\
	$(D_OBJ)/xmlparser$(O)			\
	$(D_OBJ)/odfparser$(O)

OBJS=		$(LIBOBJS) $(DLLOBJS)
LIBS=		$(HUNSPELLLIB) $(HUNSPELLDLL)
TSKS=		$(D_BIN)/hunspell$(E) $(D_BIN)/hzip$(E) $(D_BIN)/hunzip$(E)


#########################################################################################
# Rules

.PHONY:			build release debug
all:			source unpacked
unpacked:		object $(LIBS) $(TSKS) $(HUNSPELLDB) installinc

release:
		$(MAKE) BUILD_TYPE=release $(filter-out release, $(MAKECMDGOALS))
debug:
		$(MAKE) BUILD_TYPE=debug $(filter-out debug, $(MAKECMDGOALS))

$(HUNSPELLLIB):		CEXTRA += -I$(HUNSPELLSRC) -DHUNSPELL_STATIC
$(HUNSPELLLIB):		$(LIBOBJS)
		$(RM) $(RMFLAGS) $@ >/dev/null 2>&1
		$(AR) $(ARFLAGS) $@ $(LIBOBJS)
		$(RANLIB) $@

#note build as static, only exported are via hunspell_dlls./c modules
$(HUNSPELLDLL):		CEXTRA += -I$(HUNSPELLSRC) -DHUNSPELL_STATIC
$(HUNSPELLDLL):		$(DLLOBJS)
		$(LIBTOOL) --mode=link $(CC) $(LDFLAGS) -o $@ -version-number $(VERSIONSPEC) \
			-rpath $(D_LIB) -bindir $(D_BIN) $^ $(LDLIBS)

$(D_BIN)/hunspell$(E):	CEXTRA += -I$(TOOLSSRC) -I$(PARSERSSRC) -I$(HUNSPELLSRC) -DHUNSPELL_STATIC
$(D_BIN)/hunspell$(E):	$(HUNSPELLOBJS)
		$(CXX) $(LDFLAGS) -o $@ $^ $(D_LIB)/libhunspell_static$(A) $(LDLIBS)

$(D_BIN)/hzip$(E):	CEXTRA += -I$(TOOLSSRC) -I$(HUNSPELLSRC) -DHUNSPELL_STATIC
$(D_BIN)/hzip$(E):	$(D_OBJ)/hzip$(O)
		$(CXX) $(LDFLAGS) -o $@ $^ $(D_LIB)/libhunspell_static$(A) $(LDLIBS)

$(D_BIN)/hunzip$(E):	CEXTRA += -I$(TOOLSSRC) -I$(HUNSPELLSRC) -DHUNSPELL_STATIC
$(D_BIN)/hunzip$(E):	$(D_OBJ)/hunzip$(O)
		$(CXX) $(LDFLAGS) -o $@ $^ $(D_LIB)/libhunspell_static$(A) $(LDLIBS)

source:			.unpacked.$(VERSION)
		$(MAKE) unpacked

.unpacked.$(VERSION):	$(PACKED)
		@echo "do not delete, managed file" > $@
		@echo "unpacking source"
		@gzip -c -d $(PACKED) | tar -xvf -

.PHONY:		object
object:			$(D_OBJ)/.created

.PHONY:		installinc
installinc:		../include/.created
		@echo publishing headers ...
		-cp $(HUNSPELLSRC)/hunspell.h   ../include
		-cp $(HUNSPELLSRC)/hunspell.hxx ../include
		-cp $(HUNSPELLSRC)/hunvisapi.h  ../include

%/.created:
		-@mkdir $(@D)
		@echo "do not delete, managed directory" > $@

clean:
		@echo $(BUILD_TYPE) clean
		-@$(RM) $(RMFLAGS) $(TSKS) $(LIBS) $(CLEAN) $(XCLEAN) >/dev/null 2>&1
		-@$(LIBTOOL) --mode=clean $(RM) $(DLLOBJS) >/dev/null 2>&1
		-@$(RM) $(LIBOBJS) >/dev/null 2>&1

# XXX: open-watcom debug breaks due to the module size, must filter out -hw

$(D_OBJ)/lib_%$(O):	$(HUNSPELLSRC)/%.cxx
		$(CXX) $(filter-out -hw,$(CXXFLAGS)) -o $@ -c $<

$(D_OBJ)/lib_%.lo:	$(HUNSPELLSRC)/%.cxx
		$(LIBTOOL) --mode=compile $(CXX) $(filter-out -hw,$(CXXFLAGS)) -o $@ -c $<

$(D_OBJ)/%.lo:		%.cxx
		$(LIBTOOL) --mode=compile $(CXX) $(filter-out -hw,$(CXXFLAGS)) -o $@ -c $<

$(D_OBJ)/%.lo:		%.c
		$(LIBTOOL) --mode=compile $(CC) $(filter-out -hw,$(CFLAGS)) -o $@ -c $<

$(D_OBJ)/%$(O):		$(TOOLSSRC)/%.cxx
		$(CXX) $(filter-out -hw,$(CXXFLAGS)) -o $@ -c $<

$(D_OBJ)/%$(O):		$(PARSERSSRC)/%.cxx
		$(CXX) $(filter-out -hw,$(CXXFLAGS)) -o $@ -c $<

$(D_OBJ)/%$(O):		$(TOOLSSRC)/%.c
		$(CC) $(filter-out -hw,$(CFLAGS)) -o $@ -c $<

$(D_OBJ)/%$(O):		%.c
		$(CC) $(filter-out -hw,$(CFLAGS)) -o $@ -c $<

#end
